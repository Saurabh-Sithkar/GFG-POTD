// Merge 2 sorted linked list in reverse order

// Method - 1

class Solution
{
    public:
    
    struct Node * mergeResult(Node *node1,Node *node2)
    {
        // your code goes here
        Node* newNode = new Node();
        Node* ptr = newNode;
        
        while(node1 && node2){
            if(node1->data <= node2->data){
                ptr->next = node1;
                ptr = node1;
                node1 = node1->next;
            }
            else{
                ptr->next = node2;
                ptr = node2;
                node2 = node2->next;
            }
        }
        if(node1){
            ptr -> next = node1;
            
        }
        if(node2){
            ptr->next = node2;
        }
        
        Node* curr = newNode->next;
        Node* prev = NULL;
        while(curr){
            Node* temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = temp;
        }
        
        Node* last = prev;
        Node* secondLast = NULL;

        while (last && last->data == 0)
        {
            secondLast = last;
            last = last->next;
        }

        if (secondLast)
        {
            secondLast->next = NULL; 
        }
        
        return prev;
    }  
};



// Method - 2

class Solution
{
    public:
    
    struct Node * mergeResult(Node *node1,Node *node2)
    {
        // your code goes here
        Node* ans = nullptr;
        while(node1 || node2){
            if(!node2 || (node1 && node1->data < node2->data)){
                Node* temp = node1->next;
                node1->next = ans;
                ans = node1;
                node1 = temp;
            }
            else{
                Node* temp = node2->next;
                node2->next = ans;
                ans = node2;
                node2 = temp;
            }
        }
        return ans;
    }  
};
